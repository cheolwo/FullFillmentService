// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderCommon.Model;

#nullable disable

namespace 주문Common.Migrations
{
    [DbContext(typeof(주문DbContext))]
    [Migration("20230612032516_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("주문Common.Model.댓글", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("주문자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자상품Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("주문자Id");

                    b.HasIndex("판매자Id");

                    b.HasIndex("판매자상품Id");

                    b.ToTable("댓글", (string)null);
                });

            modelBuilder.Entity("주문Common.Model.상품문의", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrlsJson")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("주문자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자상품Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("주문자Id");

                    b.HasIndex("판매자Id");

                    b.HasIndex("판매자상품Id");

                    b.ToTable("상품문의", (string)null);
                });

            modelBuilder.Entity("주문Common.Model.주문", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("주문일자")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("주문자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자상품Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("주문자Id");

                    b.HasIndex("판매자Id");

                    b.HasIndex("판매자상품Id");

                    b.ToTable("주문");
                });

            modelBuilder.Entity("주문Common.Model.주문자", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("주문자");
                });

            modelBuilder.Entity("주문Common.Model.주문자구매요약", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("구매일시")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("주문자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("총구매가격")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("총수량")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("판매자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자상품Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자상품판매정보요약Id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("판매자상품판매정보요약판매자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자상품판매정보요약판매자상품Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("주문자Id");

                    b.HasIndex("판매자Id");

                    b.HasIndex("판매자상품Id");

                    b.HasIndex("판매자상품판매정보요약판매자상품Id", "판매자상품판매정보요약판매자Id");

                    b.ToTable("주문자구매요약", (string)null);
                });

            modelBuilder.Entity("주문Common.Model.판매자", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.Property<string>("판매자판매정보요약Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("판매자판매정보요약Id")
                        .IsUnique();

                    b.ToTable("판매자");
                });

            modelBuilder.Entity("주문Common.Model.판매자상품", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("창고Id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("판매개시일자")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("판매자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("판매자Id");

                    b.ToTable("판매자상품");
                });

            modelBuilder.Entity("주문Common.Model.판매자상품판매정보요약", b =>
                {
                    b.Property<string>("판매자상품Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("판매자판매정보요약판매자Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("판매자상품Id", "판매자Id");

                    b.HasIndex("판매자Id");

                    b.HasIndex("판매자판매정보요약판매자Id");

                    b.ToTable("판매자상품판매정보요약", (string)null);
                });

            modelBuilder.Entity("주문Common.Model.판매자판매정보요약", b =>
                {
                    b.Property<string>("판매자Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("판매자Id");

                    b.ToTable("판매자판매정보요약", (string)null);
                });

            modelBuilder.Entity("주문Common.Model.할일목록", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("상태")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("우선순위")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("주문Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("판매자Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("주문Id");

                    b.HasIndex("판매자Id");

                    b.ToTable("할일목록", (string)null);
                });

            modelBuilder.Entity("주문Common.Model.댓글", b =>
                {
                    b.HasOne("주문Common.Model.주문자", "주문자")
                        .WithMany("댓글들")
                        .HasForeignKey("주문자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자", null)
                        .WithMany("댓글들")
                        .HasForeignKey("판매자Id");

                    b.HasOne("주문Common.Model.판매자상품", "판매자상품")
                        .WithMany()
                        .HasForeignKey("판매자상품Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("주문자");

                    b.Navigation("판매자상품");
                });

            modelBuilder.Entity("주문Common.Model.상품문의", b =>
                {
                    b.HasOne("주문Common.Model.주문자", "주문자")
                        .WithMany("상품문의들")
                        .HasForeignKey("주문자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자", null)
                        .WithMany("상품문의들")
                        .HasForeignKey("판매자Id");

                    b.HasOne("주문Common.Model.판매자상품", "판매자상품")
                        .WithMany("상품문의들")
                        .HasForeignKey("판매자상품Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("주문자");

                    b.Navigation("판매자상품");
                });

            modelBuilder.Entity("주문Common.Model.주문", b =>
                {
                    b.HasOne("주문Common.Model.주문자", "주문자")
                        .WithMany("주문들")
                        .HasForeignKey("주문자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자", "판매자")
                        .WithMany("주문들")
                        .HasForeignKey("판매자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자상품", "판매자상품")
                        .WithMany("주문들")
                        .HasForeignKey("판매자상품Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("주문자");

                    b.Navigation("판매자");

                    b.Navigation("판매자상품");
                });

            modelBuilder.Entity("주문Common.Model.주문자구매요약", b =>
                {
                    b.HasOne("주문Common.Model.주문자", "주문자")
                        .WithMany()
                        .HasForeignKey("주문자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자", "판매자")
                        .WithMany("주문자구매요약들")
                        .HasForeignKey("판매자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자상품", "판매자상품")
                        .WithMany()
                        .HasForeignKey("판매자상품Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자상품판매정보요약", "판매자상품판매정보요약")
                        .WithMany("주문자구매요약")
                        .HasForeignKey("판매자상품판매정보요약판매자상품Id", "판매자상품판매정보요약판매자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("주문자");

                    b.Navigation("판매자");

                    b.Navigation("판매자상품");

                    b.Navigation("판매자상품판매정보요약");
                });

            modelBuilder.Entity("주문Common.Model.판매자", b =>
                {
                    b.HasOne("주문Common.Model.판매자판매정보요약", "판매자판매정보요약")
                        .WithOne("판매자")
                        .HasForeignKey("주문Common.Model.판매자", "판매자판매정보요약Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("판매자판매정보요약");
                });

            modelBuilder.Entity("주문Common.Model.판매자상품", b =>
                {
                    b.HasOne("주문Common.Model.판매자", "판매자")
                        .WithMany("판매자상품들")
                        .HasForeignKey("판매자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("판매자");
                });

            modelBuilder.Entity("주문Common.Model.판매자상품판매정보요약", b =>
                {
                    b.HasOne("주문Common.Model.판매자", "판매자")
                        .WithMany("판매자상품판매정보요약들")
                        .HasForeignKey("판매자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자상품", "판매자상품")
                        .WithMany()
                        .HasForeignKey("판매자상품Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자판매정보요약", null)
                        .WithMany("판매자상품판매정보요약들")
                        .HasForeignKey("판매자판매정보요약판매자Id");

                    b.Navigation("판매자");

                    b.Navigation("판매자상품");
                });

            modelBuilder.Entity("주문Common.Model.할일목록", b =>
                {
                    b.HasOne("주문Common.Model.주문", "주문")
                        .WithMany()
                        .HasForeignKey("주문Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("주문Common.Model.판매자", "판매자")
                        .WithMany("할일목록들")
                        .HasForeignKey("판매자Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("주문");

                    b.Navigation("판매자");
                });

            modelBuilder.Entity("주문Common.Model.주문자", b =>
                {
                    b.Navigation("댓글들");

                    b.Navigation("상품문의들");

                    b.Navigation("주문들");
                });

            modelBuilder.Entity("주문Common.Model.판매자", b =>
                {
                    b.Navigation("댓글들");

                    b.Navigation("상품문의들");

                    b.Navigation("주문들");

                    b.Navigation("주문자구매요약들");

                    b.Navigation("판매자상품들");

                    b.Navigation("판매자상품판매정보요약들");

                    b.Navigation("할일목록들");
                });

            modelBuilder.Entity("주문Common.Model.판매자상품", b =>
                {
                    b.Navigation("상품문의들");

                    b.Navigation("주문들");
                });

            modelBuilder.Entity("주문Common.Model.판매자상품판매정보요약", b =>
                {
                    b.Navigation("주문자구매요약");
                });

            modelBuilder.Entity("주문Common.Model.판매자판매정보요약", b =>
                {
                    b.Navigation("판매자");

                    b.Navigation("판매자상품판매정보요약들");
                });
#pragma warning restore 612, 618
        }
    }
}
